{"version":3,"sources":["dmPotato.ts","index.tsx"],"names":["say","text","send","_context","type","value","_do","entry","always","dmMachine","initial","states","init","on","CLICK","welcome","prompt","delay","id","ENDSPEECH","intent","invoke","src","context","_","nluRequest","text_intent","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","target","actions","assign","event","name","console","log","confidence","onError","classify_intent","cond","right","left","jump","open","close","take","confirm","nomatch","nextStep","RECOGNISED","recResult","MAXSPEECH","ask","maxspeech","stop","cancel","firstTime","promptAndAsk","listen","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","gameStart","div","document","createElement","innerHTML","d_el","getElementById","appendChild","displayTimer","goRight","potato_el","marginLeft","includes","parseInt","replace","toString","goLeft","bg_el","backgroundImage","lose","width","height","displayVid","ttsStart","effect","ttsCancel","current","onClick","rootElement","ReactDOM"],"mappings":"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","file":"static/js/main.924c6512.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction _do(text: string): MachineConfig<SDSContext, any, SDSEvent>  { \r\n    return({\r\n        entry: text,\r\n        always: '#root.dm.nextStep'\r\n    })\r\n}\r\n\r\n\r\n// RASA API\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = \"https://mr-batata.herokuapp.com/model/parse\";\r\nexport const nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: 'prompt',\r\n            \r\n            states: {\r\n                prompt: { \r\n                    entry: [send((_context: SDSContext) => ({ type: \"SPEAK\", value: \"Hey help me to find the kitchen keys\" })), 'gameStart', send('MAXSPEECH', {delay: 60000 , id: 'timeout'})],\r\n                    on: { ENDSPEECH: '#root.dm.nextStep' }\r\n                }\r\n            }\r\n        },\r\n        intent: {\r\n            invoke: {\r\n            id: 'nlu',\r\n                    src: (context, _) => nluRequest(context.text_intent), \r\n                    onDone: {\r\n                        target: 'classify_intent',\r\n                        actions: [assign((_, event) => { return {intent: event.data.intent.name }}),\r\n                      (_:SDSContext, event:any) => console.log(event.data),assign((_, event) => { return {confidence: event.data.intent.confidence }})]\r\n                    },\r\n                    onError: {\r\n                        target: 'nextStep',\r\n                        actions: (_,event) => console.log(event.data)\r\n                    }\r\n                }\r\n        },\r\n        classify_intent: {\r\n            entry: send('ENDSPEECH'),\r\n            on: {\r\n                ENDSPEECH: [\r\n                    // { target: 'confirm', cond: (context) => context.confidence < 0.725 },\r\n                    { target: 'right', cond: (context) => context.intent === 'right' },\r\n                    { target: 'left', cond: (context) => context.intent === 'left' },\r\n                    { target: 'jump', cond: (context) => context.intent === 'jump' },\r\n                    { target: 'take', cond: (context) => context.intent === 'take' },\r\n                    { target: 'open', cond: (context) => context.intent === 'open' },\r\n                    { target: 'close', cond: (context) => context.intent === 'close' },\r\n                    \r\n                    {target: 'nomatch'}] \r\n                }\r\n        },\r\n        right: {\r\n            ..._do(\"goRight\")\r\n        },\r\n        left: {\r\n            ..._do(\"goLeft\")\r\n        },\r\n        jump: {\r\n            ..._do(\"jump\")\r\n        },\r\n        open: {\r\n            ..._do(\"open\")\r\n        },\r\n        close: {\r\n            ..._do(\"close\")\r\n        },\r\n        take: {\r\n            ..._do(\"take\")\r\n        },\r\n        confirm: {\r\n            initial: 'prompt',\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Where? Which direction?\"),\r\n                    on: { ENDSPEECH: '#root.dm.nextStep' }\r\n                }\r\n            }\r\n        },\r\n        nomatch: {\r\n            initial: 'prompt',\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What?\"),\r\n                    on: { ENDSPEECH: '#root.dm.nextStep' }\r\n                }\r\n            }\r\n        },\r\n        nextStep: {\r\n            initial: 'ask',\r\n            on: {\r\n                RECOGNISED:  [{ target: 'stop', cond: (context) => context.recResult === 'stop' },\r\n                {\r\n                target: 'intent',\r\n                actions: assign((context) => { return { text_intent: context.recResult } }),\r\n                }],\r\n                MAXSPEECH: [{ \r\n                    target: 'maxspeech'\r\n            }]\r\n            },\r\n            states: {\r\n                ask: {\r\n                    entry: send('LISTEN'),\r\n                }\r\n            }\r\n        },\r\n        maxspeech: {\r\n            entry: 'lose',\r\n            always: '#root.dm.init'\r\n        },\r\n        stop: {\r\n            entry: say(\"Ok\"),\r\n            always: 'init'\r\n        }\r\n    }\r\n})\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Action, Machine, assign, send, actions, State, MachineConfig } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmPotato\";\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n// import { cancel } from \"xstate/lib/actionTypes\";\r\nconst {cancel} = actions\r\nvar firstTime = true\r\n\r\n/* questions to ask:\r\n- at position x (when img has a specific margins or whatever), limit the grammar/commands\r\n- how to check the last sent entry\r\n- how to access other files? it only accepts urls but not paths to files\r\n*/\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nexport function promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n\tinitial: 'prompt',\r\n\tstates: {\r\n            prompt: {\r\n                entry: say(prompt),\r\n                on: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n\t\t        entry: send('LISTEN'),\r\n            }\r\n\t}})\r\n}\r\n\r\nexport function say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\n\r\n\r\nexport function listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n\t\t    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: {target:'idle'}, // target idel and actions cancel\r\n                        MAXSPEECH: 'idle'\r\n                    },\r\n                    states: {\r\n\t\t    \tprogress: {\r\n\t\t\t},\t    \t\t\t\t\t\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }): //start moving the potato here\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Start Game\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            gameStart: asEffect((context) => {\r\n                          \r\n                displayTimer()\r\n\r\n            }),\r\n            goRight: asEffect((context) => {\r\n                console.log('moving the potato to the right...');\r\n                var potato_el = document.getElementById('batata')\r\n                if(potato_el!= null){\r\n                        if (firstTime){\r\n                            potato_el.style.marginLeft = \"0px\"; \r\n                            firstTime = false\r\n                        }\r\n                        if(context.recResult.includes(\"cabinet\") || context.recResult.includes(\"cupboard\") || context.recResult.includes(\"closet\")){\r\n                            potato_el.style.marginLeft = \"210px\"\r\n                        }\r\n                        else if(context.recResult.includes(\"chair\")){\r\n                            potato_el.style.marginLeft = \"490px\"\r\n                        }\r\n                        else if(context.recResult.includes(\"table\")){\r\n                            potato_el.style.marginLeft = \"700px\"\r\n                        }\r\n                        else if(context.recResult.includes(\"window\") || context.recResult.includes(\"curtains\")){\r\n                            potato_el.style.marginLeft = \"900px\"\r\n                        }else{\r\n                        potato_el.style.marginLeft = (parseInt(potato_el.style.marginLeft.replace('px','')) + 70 ).toString() + \"px\"; \r\n                        }\r\n                }\r\n            }),\r\n            goLeft: asEffect((context) => {\r\n                console.log('moving the potato to the left...');\r\n                var potato_el = document.getElementById('batata')\r\n                if(potato_el!= null){\r\n                        if (firstTime){\r\n                            potato_el.style.marginLeft = \"0px\"; \r\n                            firstTime = false\r\n                        }\r\n                        if(context.recResult.includes(\"cabinet\") || context.recResult.includes(\"cupboard\") || context.recResult.includes(\"closet\")){\r\n                            potato_el.style.marginLeft = \"210px\"\r\n                        }\r\n                        else if(context.recResult.includes(\"chair\")){\r\n                            potato_el.style.marginLeft = \"490px\"\r\n                        }\r\n                        else if(context.recResult.includes(\"table\")){\r\n                            potato_el.style.marginLeft = \"700px\"\r\n                        }\r\n                        else if(context.recResult.includes(\"window\") || context.recResult.includes(\"curtains\")){\r\n                            potato_el.style.marginLeft = \"900px\"\r\n                        }else{\r\n                            potato_el.style.marginLeft = (parseInt(potato_el.style.marginLeft.replace('px','')) - 70 ).toString() + \"px\"; \r\n                        }\r\n                }\r\n            }),\r\n           \r\n            open: asEffect((context) => {\r\n                console.log('opening...');\r\n                var potato_el = document.getElementById('batata')\r\n                var bg_el = document.getElementById('bg');\r\n                if (bg_el != null && potato_el!= null){\r\n                    // if the potato is next to the cabinet\r\n                    if(potato_el.style.marginLeft > \"139px\" && potato_el.style.marginLeft < \"220px\"){ \r\n                        bg_el.style.backgroundImage = \"url('https://i.imgur.com/WQhVQYi.png')\";}\r\n                }\r\n            }),\r\n            lose: asEffect((context) => {\r\n                console.log('Game Over');\r\n                var potato_el = document.getElementById('batata')\r\n                if (potato_el!= null){\r\n                \r\n                        potato_el.src = \"https://i.imgur.com/KmN8LvB.png\";\r\n                        potato_el.style.width = \"186px\"\r\n                        potato_el.style.height = \"154px\"\r\n                    \r\n                    }\r\n            }),\r\n            close: asEffect((context) => {\r\n                console.log('closing...');\r\n                var bg_el = document.getElementById('bg');\r\n                if (bg_el != null){\r\n                    bg_el.style.backgroundImage = \"url('https://i.imgur.com/KmN8LvB.png')\";\r\n                }\r\n                \r\n            }),\r\n            //sad potato: https://i.imgur.com/Mh1aRhA.png     -     https://i.imgur.com/KmN8LvB.png  \r\n            take: asEffect((context) => {\r\n                console.log('play video...');\r\n                var potato_el = document.getElementById('batata');\r\n                var bg_el = document.getElementById('bg');\r\n                if(potato_el != null && bg_el != null){\r\n                    console.log(potato_el.style.marginLeft);\r\n                    console.log(bg_el.style.backgroundImage)\r\n                      \r\n                    //if the potato is infront of the cabinet and it is already open\r\n                    if(potato_el.style.marginLeft > \"139px\" && potato_el.style.marginLeft < \"220px\" && bg_el.style.backgroundImage == 'url(\"https://i.imgur.com/WQhVQYi.png\")'){\r\n                        // var timer = document.getElementById(\"timer\")\r\n                        // if(timer != null){\r\n                        //     timer.remove();\r\n                        // }\r\n                        cancel('timeout')\r\n                        potato_el.src = \"http://pa1.narvii.com/7324/3ec4179c3653b974d7197b01fe372f1ec4e45b4er1-370-300_00.gif\";\r\n                        potato_el.style.width = \"200px\";\r\n                        potato_el.style.height = \"250px\";\r\n                        displayVid()\r\n                    }\r\n                }\r\n                \r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\" id=\"bg\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nfunction displayTimer() {\r\n    const div = document.createElement('div');\r\n  \r\n    div.id = 'timer';\r\n  \r\n    div.innerHTML = `\r\n    <img class = \"timer_element\" src=\"https://timertopia.files.wordpress.com/2017/04/1-minute.gif\" width=\"110\" \">\r\n    `;\r\n    var d_el = document.getElementById('bg');\r\n    if(d_el != null){\r\n        d_el.appendChild(div);\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction displayVid() {\r\n    const div = document.createElement('div');\r\n  \r\n    div.className = 'row';\r\n  \r\n    div.innerHTML = `\r\n    <iframe width=\"1020\" height=\"900\" src=\"https://www.youtube.com/embed/q7uyKYeGPdE?autoplay=1\" allow=\"autoplay\" allowfullscreen>\r\n    </iframe>\r\n    `;\r\n    var d_el = document.getElementById('bg');\r\n    if(d_el != null){\r\n        d_el.appendChild(div);\r\n    }\r\n}\r\n  \r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);"],"sourceRoot":""}